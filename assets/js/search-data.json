{
  
    
        "post0": {
            "title": "Future Sales Prediction with Machine Learning",
            "content": "Predicting the future sales of a product helps a business manage the manufacturing and advertising cost of the product. There are many more benefits of predicting the future sales of a product. So if you want to learn to predict the future sales of a product with machine learning, this article is for you. In this article, I will take you through the task of future sales prediction with machine learning using Python. . The dataset given here contains the data about the sales of the product. The dataset is about the advertising cost incurred by the business on various advertising platforms. Below is the description of all the columns in the dataset: . TV: Advertising cost spent in dollars for advertising on TV; | Radio: Advertising cost spent in dollars for advertising on Radio; | Newspaper: Advertising cost spent in dollars for advertising on Newspaper; | ales: Number of units sold; | So, in the above dataset, the sales of the product depend on the advertisement cost of the product. I hope you now have understood everything about this dataset. Now in the section below, I will take you through the task of future sales prediction with machine learning using Python. . Future Sales Prediction using Python . Let’s start the task of future sales prediction with machine learning by importing the necessary Python libraries and the dataset: . import pandas as pd import numpy as np from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression data = pd.read_csv(&quot;https://raw.githubusercontent.com/amankharwal/Website-data/master/advertising.csv&quot;) print(data.head()) . TV Radio Newspaper Sales 0 230.1 37.8 69.2 22.1 1 44.5 39.3 45.1 10.4 2 17.2 45.9 69.3 12.0 3 151.5 41.3 58.5 16.5 4 180.8 10.8 58.4 17.9 . Let’s have a look at whether this dataset contains any null values or not: . print(data.isnull().sum()) . TV 0 Radio 0 Newspaper 0 Sales 0 dtype: int64 . So this dataset doesn’t have any null values. Now let’s visualize the relationship between the amount spent on advertising on TV and units sold: . import plotly.express as px import plotly.graph_objects as go figure = px.scatter(data_frame = data, x=&quot;Sales&quot;, y=&quot;TV&quot;, size=&quot;TV&quot;, trendline=&quot;ols&quot;) figure.show() . /usr/local/lib/python3.7/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead. import pandas.util.testing as tm . . . Now let’s visualize the relationship between the amount spent on advertising on newspapers and units sold: . figure = px.scatter(data_frame = data, x=&quot;Sales&quot;, y=&quot;Newspaper&quot;, size=&quot;Newspaper&quot;, trendline=&quot;ols&quot;) figure.show() . . . Now let’s visualize the relationship between the amount spent on advertising on radio and units sold: . figure = px.scatter(data_frame = data, x=&quot;Sales&quot;, y=&quot;Radio&quot;, size=&quot;Radio&quot;, trendline=&quot;ols&quot;) figure.show() . . . Out of all the amount spent on advertising on various platforms, I can see that the amount spent on advertising the product on TV results in more sales of the product. Now let’s have a look at the correlation of all the columns with the sales column: . correlation = data.corr() print(correlation[&quot;Sales&quot;].sort_values(ascending=False)) . Sales 1.000000 TV 0.901208 Radio 0.349631 Newspaper 0.157960 Name: Sales, dtype: float64 . Future Sales Prediction Model . Now in this section, I will train a machine learning model to predict the future sales of a product. But before I train the model, let’s split the data into training and test sets: . x = np.array(data.drop([&quot;Sales&quot;], 1)) y = np.array(data[&quot;Sales&quot;]) xtrain, xtest, ytrain, ytest = train_test_split(x, y, test_size=0.2, random_state=42) . /usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:1: FutureWarning: In a future version of pandas all arguments of DataFrame.drop except for the argument &#39;labels&#39; will be keyword-only . Now let’s train the model to predict future sales: . model = LinearRegression() model.fit(xtrain, ytrain) print(model.score(xtest, ytest)) . 0.9059011844150825 . Now let’s input values into the model according to the features we have used to train it and predict how many units of the product can be sold based on the amount spent on its advertising on various platforms: . features = np.array([[230.1, 37.8, 69.2]]) print(model.predict(features)) . [21.37254028] . Summary . So this is how we can train a machine learning model to predict the future sales of a product. Predicting the future sales of a product helps a business manage the manufacturing and advertising cost of the product. I hope you liked this article on future sales prediction with machine learning. Feel free to ask valuable questions in the comments section below. .",
            "url": "https://impepper.github.io/myPortfolio/2022/04/20/Future-Sales-Prediction-with-Machine-Learning.html",
            "relUrl": "/2022/04/20/Future-Sales-Prediction-with-Machine-Learning.html",
            "date": " • Apr 20, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Customer Lifetime Value (CLTV)  用戶全生命週期價值計算及消費預測",
            "content": "Customer Lifetime Value (CLTV or CLV) &#26159;&#20160;&#40636; . 顧名思義，Customer Lifetime Value就是用戶在其生命週期內所能帶來的商業價值。以商業市場來說，CLTV 即是消費者從第一次購買你的產品，直到不再購買你的產品為止，在這段時間內對於你的公司所貢獻的商業價值。 . &#28858;&#20160;&#40636;&#38656;&#35201; CLTV &#20316;&#28858;&#34913;&#37327;&#25351;&#27161; . &#36628;&#21161;&#21046;&#23450; CAC &#25351;&#27161; . CAC (Customer Acquisition Cost) 代表獲取一個顧客的成本，在商業經營中，唯有用戶在其生命週期內所帶來的商業價值（CLTV） 大於 獲取這位顧客的成本(CAC)，這個 Business 才能持續地滾動下去。因此，透過CLTV，商業經營者可以更加明確的規劃面相於故各地個性行銷活動，以確保商業模式能夠長久運轉。 . &#21487;&#25345;&#32396;&#24615;&#30340;&#22686;&#38263;&#25351;&#27161; . 隨著技術對用戶的生活產生改變，用戶的接觸點（Endpoints）越來越多多樣化，相對應的行銷策略與手段也因此而產生了重大變化，新零售（OMO）概念正充分說明，光是倚靠 Revenue 或是 CAC 來作為指標，無法有效的去衡量日常所做的每個項目投入；若是持續的僅使用這兩個指標來做衡量，甚至可能因此讓錯失了很多重要的項目無法被實施。 . CLTV 和傳統常見的指標最大的不同在於：是將多個部門的「心血」所匯集在一起呈現的指標。 CLTV的增長，反映了行銷、產品、業務跨三個部門協同運作的成果，將單一部門的活動轉化成了整體的經營成效增長。 . CLTV一直是 Amazon 內部採用作為日常增長指標來判斷一個項目/業務是否成功的衡量方式，像是知名的 Kindle 業務即是在這樣的文化下所誕生並且成功。以一個近乎成本價的方式銷售 Kindle device，而購買 Kindle 後的用戶其設備上產生的消費金額，才是衡量該業務成功與否的核心指標。 . 在這個實作中，我將以消費紀錄為基礎，利用機器學習，來計算消費者 Lifetime Value，並推估該用戶未來六個月的消費數據。 . 數據資料 . 在本次使用的消費紀錄資料中，包含了以下欄位： . 消費日期 | Invoice Number | 客戶編號 | 消費金額 | . 首先，我們導入此次專案所需要的 Python 函式庫 . import pandas as pd import numpy as np import matplotlib.pyplot as plt import seaborn as sns sns.set() import warnings warnings.filterwarnings(&#39;ignore&#39;) . 接下來，進行數據資料的讀取及匯入 . #data = pd.read_csv(&quot;datasource/data.csv&quot;, parse_dates=[&#39;invoice_date&#39;]) data_clv = pd.read_csv(&quot;datasource/CLTV_data.csv&quot;, parse_dates=[&#39;invoice_date&#39;]) print(&quot;Total number of transactions happened in the given period: &quot;+ str(data_clv.shape[0])) data_clv.head(5) . Total number of transactions happened in the given period: 32030 . invoice_id invoice_date invoice_cus_id invoice_amount . 0 2021020600200001 | 2021-02-06 09:41:00 | 701000008.0 | 245 | . 1 2021020600200002 | 2021-02-06 09:43:00 | 701000001.0 | 240 | . 2 2021020600200003 | 2021-02-06 09:45:00 | 701000010.0 | 100 | . 3 2021020600200004 | 2021-02-06 09:46:00 | 701000010.0 | 515 | . 4 2021020600200005 | 2021-02-06 09:46:00 | 701000010.0 | 140 | . 因為退貨、折扣等因素，消費金額中可能會有負數出現。不過，在客戶生命週期價值計算中，我們只對客戶在其生命週期內可以為企業產生的總價值感興趣，我們可以簡單地將消費中的負值紀錄除掉，只使用正值。 . data_clv = data_clv[data_clv[&#39;invoice_amount&#39;] &gt; 0] data_clv.describe() #了解目前數列的各項統計數據 . invoice_cus_id invoice_amount . count 3.144700e+04 | 31447.000000 | . mean 7.211368e+08 | 354.360448 | . std 3.949744e+09 | 860.162176 | . min 2.010000e+08 | 1.000000 | . 25% 7.010000e+08 | 89.000000 | . 50% 7.010000e+08 | 150.000000 | . 75% 7.010002e+08 | 345.000000 | . max 7.010030e+11 | 67080.000000 | . 我們檢查一下現有資料中有沒有其他遺漏數據的資料列，像是欄位值為空值之類。 . 此外，因為接下來可能需要計算每位客戶的CLTV，我們也要過濾掉客戶資料欄為空值的資料 . data_clv = data_clv[pd.notnull(data_clv[&#39;invoice_cus_id&#39;])] pd.DataFrame(zip(data_clv.isnull().sum(), data_clv.isnull().sum()/len(data_clv)), columns=[&#39;Count&#39;, &#39;Proportion&#39;], index=data_clv.columns) . Count Proportion . invoice_id 0 | 0.0 | . invoice_date 0 | 0.0 | . invoice_cus_id 0 | 0.0 | . invoice_amount 0 | 0.0 | . 至此，資料已經整理完畢，讓我們初步看一下目前數據的基本資料： . maxdate = data_clv[&#39;invoice_date&#39;].dt.date.max() mindate = data_clv[&#39;invoice_date&#39;].dt.date.min() unique_cust = data_clv[&#39;invoice_cus_id&#39;].nunique() tot_sales = data_clv[&#39;invoice_amount&#39;].sum() print(f&quot;The Time range of transactions is: {mindate} to {maxdate}&quot;) print(f&quot;Total number of unique customers: {unique_cust}&quot;) print(f&quot;Total Sales for the period: {tot_sales}&quot;) . The Time range of transactions is: 2021-02-06 to 2022-04-20 Total number of unique customers: 2615 Total Sales for the period: 11143573 . &#35336;&#31639; Customer Lifetime Value . Aggregate Model . 計算 CLTV 的最簡單和最古老的方法是平均法。這假設所有客戶的平均支出和流失率保持不變。 . 此方法不區分單一客戶，只會整體地生成單一的CLTV數值。雖然對於一般消費者還算堪用，不過如果一些客戶進行高價值和高交易量的交易，對於這類消費者的生命週期價值將出現不切實際的估計。 . 平均法中用以計算CLTV的公式如下： . CLV = ((Average Sales X Purchase Frequency) / Churn) X Profit Margin . 其中， . Average Sales = TotalSales/Total no. of orders . Purchase Frequency = Total no. of orders/Total unique customers . Retention rate = Total no. of orders greater than 1/ Total unique customers . Churn = 1 - Retention rate . Profit Margin = Based on business context . customer = data_clv.groupby(&#39;invoice_cus_id&#39;).agg({&#39;invoice_date&#39;:lambda x: (x.max() - x.min()).days, &#39;invoice_id&#39;: lambda x: len(x), &#39;invoice_amount&#39;: lambda x: sum(x)}) customer.columns = [&#39;Age&#39;, &#39;Frequency&#39;, &#39;TotalSales&#39;] customer.head() . Age Frequency TotalSales . invoice_cus_id . 201000002.0 434 | 172 | 64997 | . 701000001.0 437 | 322 | 231844 | . 701000002.0 387 | 208 | 149509 | . 701000003.0 294 | 110 | 40052 | . 701000004.0 124 | 11 | 7749 | . Average_sales = round(np.mean(customer[&#39;TotalSales&#39;]),2) print(f&quot;Average sales: ${Average_sales}&quot;) Purchase_freq = round(np.mean(customer[&#39;Frequency&#39;]), 2) print(f&quot;Purchase Frequency: {Purchase_freq}&quot;) Retention_rate = customer[customer[&#39;Frequency&#39;]&gt;1].shape[0]/customer.shape[0] churn = round(1 - Retention_rate, 2) print(f&quot;Churn: {churn}%&quot;) . Average sales: $4261.4 Purchase Frequency: 12.03 Churn: 0.53% . 假設每筆交易所帶來的利潤空間(Profit margin)為5%進行計算 . Profit_margin = 0.05 CLTV = round(((Average_sales * Purchase_freq/churn)) * Profit_margin, 2) print(f&quot;The Customer Lifetime Value (CLTV) for each customer is: ${CLTV}&quot;) . The Customer Lifetime Value (CLTV) for each customer is: $4836.29 . 從這個方法中，我們得到了每個客戶的 CLTV 值。 你覺得這個數字有意義嗎？ 原因是因為來自極少數客戶具有非常高的銷售金額，而這個CLTV值實際上完全無法反應該類消費者的生命週期價值 . Cohort Model . 相比計算一個整體的CLTV值，我們可以嘗試將他們分成多個組來計算每個組的 CLTV，而不是簡單地假設所有客戶為一個組。這稱為隊列模型。 . 該模型的主要假設是，同組中的客戶花費相似。 . 這種模型克服了平均法模型的主要缺點 。 將客戶分組為同類群組的最常見方法是按客戶的開始日期，通常是按照月份。 . 在這種假設狀況下，我依照他們的消費開始月份將他們分組到不同的群組中。 . customer = data_clv.groupby(&#39;invoice_cus_id&#39;).agg({&#39;invoice_date&#39;:lambda x: x.min().month, &#39;invoice_id&#39;: lambda x: len(x), &#39;invoice_amount&#39;: lambda x: np.sum(x)}) customer.columns = [&#39;Start_Month&#39;, &#39;Frequency&#39;, &#39;TotalSales&#39;] customer.head() . Start_Month Frequency TotalSales . invoice_cus_id . 201000002.0 2 | 172 | 64997 | . 701000001.0 2 | 322 | 231844 | . 701000002.0 2 | 208 | 149509 | . 701000003.0 2 | 110 | 40052 | . 701000004.0 2 | 11 | 7749 | . months = [&#39;Jan&#39;, &#39;Feb&#39;, &#39;March&#39;, &#39;Apr&#39;, &#39;May&#39;, &#39;Jun&#39;, &#39;Jul&#39;, &#39;Aug&#39;, &#39;Sep&#39;, &#39;Oct&#39;, &#39;Nov&#39;, &#39;Dec&#39;] Monthly_CLV = [] for i in range(1, 13): customer_m = customer[customer[&#39;Start_Month&#39;]==i] Average_sales = round(np.mean(customer_m[&#39;TotalSales&#39;]),2) Purchase_freq = round(np.mean(customer_m[&#39;Frequency&#39;]), 2) Retention_rate = customer_m[customer_m[&#39;Frequency&#39;]&gt;1].shape[0]/customer_m.shape[0] churn = round(1 - Retention_rate, 2) CLV = round(((Average_sales * Purchase_freq/churn)) * Profit_margin, 2) Monthly_CLV.append(CLV) . monthly_clv = pd.DataFrame(zip(months, Monthly_CLV), columns=[&#39;Months&#39;, &#39;CLTV&#39;]) display(monthly_clv.style.background_gradient()) . &nbsp; Months CLTV . 0 Jan | 3673.600000 | . 1 Feb | 68379.320000 | . 2 March | 453.970000 | . 3 Apr | 386.970000 | . 4 May | 963.540000 | . 5 Jun | 1815.530000 | . 6 Jul | 1221.690000 | . 7 Aug | 927.490000 | . 8 Sep | 402.360000 | . 9 Oct | 305.040000 | . 10 Nov | 223.430000 | . 11 Dec | 92.510000 | . 現在，如果查看結果，從1月到12月，我們有 12 個不同的 CLTV 值。 . 很明顯，在不同月份獲得的客戶具有不同的 CLTV 值。 這是因為，他們可以通過不同的活動等方式獲得，因此他們的行為可能與其他人不同。 . BG/NBD Model (with Gamma-Gamma extension) . BG/NBD 指的是概率論中的 β 負二項分佈（離散隨機變量 X 的概率分佈） . 這是用於預測 CLTV 的最常用的概率模型之一，也是 CLV 計算中最常用的方法之一。 . 在本例中，我們將只關注 BG/NBD 模型。 BG/NBD 模型實際上試圖預測每個客戶的未來交易。然後將其與 Gamma-Gamma 模型相結合，得到客戶生命週期價值 (CLTV)。 . The BG/NBD 有一些假設條件： . When a user is active, number of transactions in a time t is described by Poisson distribution with rate lambda. | Heterogeneity in transaction across users (difference in purchasing behavior across users) has Gamma distribution with shape parameter r and scale parameter a. | Users may become inactive after any transaction with probability p and their dropout point is distributed between purchases with Geometric distribution. | Heterogeneity in dropout probability has Beta distribution with the two shape parameters alpha and beta. | Transaction rate and dropout probability vary independently across users. | 這些是該模型在預測客戶未來交易時考慮的一些假設。 . 我們不必擔心自己執行這個複雜的概率模型。有一個名為 Lifetimes 的 Python 函式庫，主要用於幫助計算客戶生命週期價值、預測客戶流失等。它具有 CLTV 計算所需的所有主要模型和實用功能。 . 在這種情況下，我們將利用這個函式庫，快速進行CLTV計算。 . import lifetimes . 首先，我們需要匯總我們的交易數據，使其成為一個客戶級別的 RFM 表格。 （RFM - Recency、Freguency &amp; Monetary） . 為此，我們可以在Lifetimes 函式庫中使用 summary_data_from_transactions_data 函數。 . 他所做的是將交易級別數據整合到客戶級別，並且計算每個客戶的Recency、Freguency、 T &amp; Monetary: . frequency - the number of repeat purchases (more than 1 purchases) | recency - the time between the first and the last transaction | T - the time between the first purchase and the end of the transaction period | monetary_value - it is the mean of a given customers sales value | . summary = lifetimes.utils.summary_data_from_transaction_data(data_clv, &#39;invoice_cus_id&#39;, &#39;invoice_date&#39;, &#39;invoice_amount&#39; ) summary = summary.reset_index() summary.head() . invoice_cus_id frequency recency T monetary_value . 0 201000002.0 | 122.0 | 434.0 | 438.0 | 527.270492 | . 1 701000001.0 | 181.0 | 437.0 | 438.0 | 1279.011050 | . 2 701000002.0 | 136.0 | 387.0 | 438.0 | 1092.125000 | . 3 701000003.0 | 81.0 | 294.0 | 427.0 | 480.765432 | . 4 701000004.0 | 9.0 | 125.0 | 435.0 | 853.222222 | . Here the value of 0 in frequency and recency means that, these are one time buyers. Let&#39;s check how many such one time buyers are there in our data. . summary[&#39;frequency&#39;].plot(kind=&#39;hist&#39;, bins=50) print(summary[&#39;frequency&#39;].describe()) print(&quot;&quot;) one_time_buyers = round(sum(summary[&#39;frequency&#39;] == 0)/float(len(summary))*(100),2) print(&quot;Percentage of customers purchase the item only once:&quot;, one_time_buyers ,&quot;%&quot;) . count 2615.000000 mean 2.221797 std 9.950323 min 0.000000 25% 0.000000 50% 0.000000 75% 2.000000 max 367.000000 Name: frequency, dtype: float64 Percentage of customers purchase the item only once: 55.72 % . Now, let&#39;s fit the BG/NBD model to our summary data. . BG/NBD model is available as BetaGeoFitter class in lifetimes package. . bgf = lifetimes.BetaGeoFitter(penalizer_coef=0.001) bgf.fit(summary[&#39;frequency&#39;], summary[&#39;recency&#39;], summary[&#39;T&#39;]) . &lt;lifetimes.BetaGeoFitter: fitted with 2615 subjects, a: 0.39, alpha: 16.78, b: 1.33, r: 0.22&gt; . bgf.summary . coef se(coef) lower 95% bound upper 95% bound . r 0.218279 | 0.008915 | 0.200805 | 0.235753 | . alpha 16.779933 | 1.179340 | 14.468426 | 19.091440 | . a 0.387987 | 0.042371 | 0.304941 | 0.471034 | . b 1.334940 | 0.184841 | 0.972652 | 1.697228 | . 上表顯示了從歷史數據中估計的分佈參數值。 該模型會使用它來預測未來的交易和客戶流失率。 . 因此，假設您想根據歷史數據了解客戶現在是否還活著（或預測客戶流失）。 在Lifetimes 函式庫中可以使用： . 1. model.conditional_probability_alive(): 此函數可以用來計算具有歷史記錄（frequency, recency, T）的客戶當前還活著的概率。 . 2. plot_probabilty_alive_matrix(model): 這個函數可以協助我們直觀地分析recency, frequency與客戶存活之間的關係。 . summary[&#39;probability_alive&#39;] = bgf.conditional_probability_alive(summary[&#39;frequency&#39;], summary[&#39;recency&#39;], summary[&#39;T&#39;]) summary.head(10) . invoice_cus_id frequency recency T monetary_value probability_alive . 0 201000002.0 | 122.0 | 434.0 | 438.0 | 527.270492 | 9.907499e-01 | . 1 701000001.0 | 181.0 | 437.0 | 438.0 | 1279.011050 | 9.968217e-01 | . 2 701000002.0 | 136.0 | 387.0 | 438.0 | 1092.125000 | 3.230038e-05 | . 3 701000003.0 | 81.0 | 294.0 | 427.0 | 480.765432 | 5.699000e-11 | . 4 701000004.0 | 9.0 | 125.0 | 435.0 | 853.222222 | 5.512930e-04 | . 5 701000006.0 | 4.0 | 302.0 | 401.0 | 165.000000 | 7.811945e-01 | . 6 701000008.0 | 0.0 | 0.0 | 438.0 | 0.000000 | 1.000000e+00 | . 7 701000009.0 | 4.0 | 305.0 | 425.0 | 972.500000 | 7.458372e-01 | . 8 701000010.0 | 367.0 | 438.0 | 438.0 | 13758.144414 | 9.989449e-01 | . 9 701000011.0 | 1.0 | 88.0 | 438.0 | 6350.000000 | 3.652369e-01 | . from lifetimes.plotting import plot_probability_alive_matrix fig = plt.figure(figsize=(12,8)) plot_probability_alive_matrix(bgf) . &lt;AxesSubplot:title={&#39;center&#39;:&#39;Probability Customer is Alive, nby Frequency and Recency of a Customer&#39;}, xlabel=&#34;Customer&#39;s Historical Frequency&#34;, ylabel=&#34;Customer&#39;s Recency&#34;&gt; . 稍微解釋一下： . 客戶存活機率，是依照客戶的Recency以及Frequency來計算出來的，所以： . 如果客戶購買了多次（Frequency）並且第一次和最後一次交易之間的時間很長（Recency），那麼他/她存續的可能性就很高。 | 同樣，如果客戶的頻率較低（只有購買一次或兩次）並且第一次和最後一次交易之間的時間很短（Recency），那麼他/她的存活概率就很高。 | . 接下來我們還可以使用這個經過訓練的模型來預測每個客戶未來可能發生的交易。 您可以使用： . model.conditional_expected_number_of_purchases_up_to_time() . 計算從人群（或整個人群）中隨機選擇的個體到時間 t 的預期重複購買次數 - 假設他們有購買記錄（frequency, recency, T）。 . t = 30 # 預測接下來的30天內，各個消費者的預期重複回購次數 summary[&#39;pred_num_txn&#39;] = round(bgf.conditional_expected_number_of_purchases_up_to_time(t, summary[&#39;frequency&#39;], summary[&#39;recency&#39;], summary[&#39;T&#39;]),2) summary.sort_values(by=&#39;pred_num_txn&#39;, ascending=False).head(10).reset_index() . index invoice_cus_id frequency recency T monetary_value probability_alive pred_num_txn . 0 8 | 701000010.0 | 367.0 | 438.0 | 438.0 | 13758.144414 | 0.998945 | 23.90 | . 1 2392 | 701003443.0 | 79.0 | 98.0 | 98.0 | 3692.278481 | 0.995133 | 19.67 | . 2 1 | 701000001.0 | 181.0 | 437.0 | 438.0 | 1279.011050 | 0.996822 | 11.77 | . 3 0 | 201000002.0 | 122.0 | 434.0 | 438.0 | 527.270492 | 0.990750 | 7.89 | . 4 1328 | 701001605.0 | 48.0 | 342.0 | 342.0 | 289.708333 | 0.992037 | 3.94 | . 5 1816 | 701002433.0 | 34.0 | 241.0 | 245.0 | 437.352941 | 0.981221 | 3.77 | . 6 1751 | 701002326.0 | 30.0 | 257.0 | 258.0 | 140.466667 | 0.985921 | 3.19 | . 7 2531 | 701003765.0 | 6.0 | 33.0 | 34.0 | 271.666667 | 0.935184 | 3.14 | . 8 335 | 701000367.0 | 47.0 | 413.0 | 421.0 | 1095.872340 | 0.980795 | 3.13 | . 9 1616 | 701002107.0 | 29.0 | 284.0 | 289.0 | 2824.275862 | 0.979038 | 2.76 | . 既然我們預測了預期的未來交易，我們現在需要預測每筆交易的未來貨幣價值。 . 就像我之前提到的，BG/NBD 模型只能預測客戶的未來交易和流失率。 為了增加問題的貨幣方面，我們必須使用 Gamma-Gamma 模型 對貨幣價值進行建模。 . Gamma-Gamma 模型的一些關鍵假設是： . 客戶給定交易的貨幣價值在其平均交易價值附近隨機變化。 | 平均交易價值因客戶而異，但對於任何給定客戶不會隨時間而變化。 | 客戶之間平均交易價值的分佈與交易過程無關。 | 作為將模型擬合到數據之前的第一步，我們必須檢查模型所做的假設是否適用於這些數據：只有滿足了，我們才繼續進行。 . 注意：我們只考慮重複購買的客戶，即頻率 &gt; 0。因為如果頻率為 0，則意味著他們是一次性客戶並且被認為已經流失。 . return_customers_summary = summary[summary[&#39;frequency&#39;]&gt;0] return_customers_summary[[&#39;frequency&#39;, &#39;monetary_value&#39;]].corr() . frequency monetary_value . frequency 1.000000 | 0.308369 | . monetary_value 0.308369 | 1.000000 | . 在這個CASE中，交易的頻率和貨幣價值之間沒有關係，我們可以透過相關性驗證其相關姓性並不顯著。 . 再來，我們利用 Gamma-Gamma 模型進行建模： . ggf = lifetimes.GammaGammaFitter(penalizer_coef=0.001) ggf.fit(return_customers_summary[&#39;frequency&#39;], return_customers_summary[&#39;monetary_value&#39;]) # Summary of the fitted parameters ggf.summary . coef se(coef) lower 95% bound upper 95% bound . p 10.770713 | 0.421400 | 9.944770 | 11.596656 | . q 0.665780 | 0.023646 | 0.619433 | 0.712127 | . v 10.636420 | 0.429762 | 9.794086 | 11.478754 | . 接下來，我們可以使用該模型預測每筆交易的預期平均利潤和客戶生命週期價值。 . 1. model.conditional_expected_average_profit(): 該函數計算一個或多個客戶的每筆交易的期望平均利潤。 . 2. model.customer_lifetime_value(): 該函數計算一組一個或多個客戶的平均生命週期價值。 該方法以 BG/NBD 模型和預測範圍作為參數來計算 CLTV。 . summary = summary[summary[&#39;monetary_value&#39;] &gt;0] summary[&#39;exp_avg_sales&#39;] = ggf.conditional_expected_average_profit(summary[&#39;frequency&#39;], summary[&#39;monetary_value&#39;]) summary.head() . invoice_cus_id frequency recency T monetary_value probability_alive pred_num_txn exp_avg_sales . 0 201000002.0 | 122.0 | 434.0 | 438.0 | 527.270492 | 9.907499e-01 | 7.89 | 527.491842 | . 1 701000001.0 | 181.0 | 437.0 | 438.0 | 1279.011050 | 9.968217e-01 | 11.77 | 1279.289134 | . 2 701000002.0 | 136.0 | 387.0 | 438.0 | 1092.125000 | 3.230038e-05 | 0.00 | 1092.452468 | . 3 701000003.0 | 81.0 | 294.0 | 427.0 | 480.765432 | 5.699000e-11 | 0.00 | 481.081044 | . 4 701000004.0 | 9.0 | 125.0 | 435.0 | 853.222222 | 5.512930e-04 | 0.00 | 857.360073 | . 注意： 我們使用上述方法所得到的銷售額而不是利潤。我們可以另外將結果乘以我們的利潤率，得出實際利潤值。 . print(f&quot;Expected Average Sales: {summary[&#39;exp_avg_sales&#39;].mean()}&quot;) print(f&quot;Actual Average Sales: {summary[&#39;monetary_value&#39;].mean()}&quot;) . Expected Average Sales: 731.1509233516309 Actual Average Sales: 713.8926372998563 . 現在，讓我們直接使用Lifetime 函式庫中的函數來計算客戶生命週期價值。 . 有幾件事情要注意： . 1. time: customer_lifetime_value()函數中的這個參數以月為單位，t=1表示一個月，以此類推。 . 2. freq: 此參數是您將指定數據所在的時間單位的位置。如果您的數據是每日級別，那麼“D”，每月“M”等等。 . 3. discount_rate: 這個參數是基於DCF（discounted cash flow）的概念，你將未來的貨幣價值通過一個貼現率貼現得到該現金流的現值。 在文件中，給出的預設值是每月 0.01（每年 ~12.7%）。 . summary[&#39;predicted_clv&#39;] = ggf.customer_lifetime_value(bgf, summary[&#39;frequency&#39;], summary[&#39;recency&#39;], summary[&#39;T&#39;], summary[&#39;monetary_value&#39;], time=1, # lifetime in months freq=&#39;D&#39;, # frequency in which the data is present(T) discount_rate=0.01) # discount rate summary.head() . invoice_cus_id frequency recency T monetary_value probability_alive pred_num_txn exp_avg_sales predicted_clv . 0 201000002.0 | 122.0 | 434.0 | 438.0 | 527.270492 | 9.907499e-01 | 7.89 | 527.491842 | 4.120102e+03 | . 1 701000001.0 | 181.0 | 437.0 | 438.0 | 1279.011050 | 9.968217e-01 | 11.77 | 1279.289134 | 1.490641e+04 | . 2 701000002.0 | 136.0 | 387.0 | 438.0 | 1092.125000 | 3.230038e-05 | 0.00 | 1092.452468 | 3.100526e-01 | . 3 701000003.0 | 81.0 | 294.0 | 427.0 | 480.765432 | 5.699000e-11 | 0.00 | 481.081044 | 1.471555e-07 | . 4 701000004.0 | 9.0 | 125.0 | 435.0 | 853.222222 | 5.512930e-04 | 0.00 | 857.360073 | 2.830461e-01 | . 您還可以根據未來交易的預測數量 (pred_num_txn) 和每筆交易的預期平均銷售額 (exp_avg_sales) 手動計算 CLTV。 . summary[&#39;manual_predicted_clv&#39;] = summary[&#39;pred_num_txn&#39;] * summary[&#39;exp_avg_sales&#39;] summary.head() . invoice_cus_id frequency recency T monetary_value probability_alive pred_num_txn exp_avg_sales predicted_clv manual_predicted_clv . 0 201000002.0 | 122.0 | 434.0 | 438.0 | 527.270492 | 9.907499e-01 | 7.89 | 527.491842 | 4.120102e+03 | 4161.910633 | . 1 701000001.0 | 181.0 | 437.0 | 438.0 | 1279.011050 | 9.968217e-01 | 11.77 | 1279.289134 | 1.490641e+04 | 15057.233110 | . 2 701000002.0 | 136.0 | 387.0 | 438.0 | 1092.125000 | 3.230038e-05 | 0.00 | 1092.452468 | 3.100526e-01 | 0.000000 | . 3 701000003.0 | 81.0 | 294.0 | 427.0 | 480.765432 | 5.699000e-11 | 0.00 | 481.081044 | 1.471555e-07 | 0.000000 | . 4 701000004.0 | 9.0 | 125.0 | 435.0 | 853.222222 | 5.512930e-04 | 0.00 | 857.360073 | 2.830461e-01 | 0.000000 | . 兩個 CLV 值非常接近，並且在接下來的 30 天內似乎是合理的。 . 這裡需要注意的一點是，我們為 CLTV 計算的兩個值都是銷售價值，而不是實際利潤。 . Summary . 我們預測了每個客戶未來 30 天的 CLTV。 . 行銷及業務團隊現在可以透過這些信息來定位客戶並尋求合適的方式來增加他們的銷售額。 . 希望你喜歡這篇文章。 .",
            "url": "https://impepper.github.io/myPortfolio/python/prediction/jupyter/customer%20life%20time%20value/sales/2022/04/11/Customer-Lifetime-Value-(CLV).html",
            "relUrl": "/python/prediction/jupyter/customer%20life%20time%20value/sales/2022/04/11/Customer-Lifetime-Value-(CLV).html",
            "date": " • Apr 11, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "股價預測",
            "content": "&#32929;&#20729;&#38928;&#28204;&#26159;&#27231;&#22120;&#23416;&#32722;&#22312;&#37329;&#34701;&#38936;&#22495;&#26368;&#37325;&#35201;&#30340;&#25033;&#29992;&#20043;&#19968;&#12290;&#22312;&#36889;&#31687;&#25991;&#31456;&#20013;&#65292;&#25105;&#23559;&#22039;&#35430;&#36879;&#36942;&#20351;&#29992; Python &#30340;&#32218;&#24615;&#22238;&#27512;&#27169;&#22411;&#20358;&#36914;&#34892;&#32929;&#31080;&#20729;&#26684;&#30340;&#38928;&#28204;&#12290; . Stock Price Prediction . 預測股市的價格，一直是投資者的終極目標。 在每天數以億計的交易之中，每筆交易，都代表者投資者對於該股票的價格預期，並且期望透過交易獲利。 . 也因此，股票漲跌，便取決於投資者在交易市場中的投資行為。 如果投資者能夠準確預測市場動向，便有機會創造誘人的財富。 . 如果您具有股票市場的投資經驗以及機器學習的量化數據分析技能，對於您進行股票價格預測將會有明顯的助益。 . 我們來看看如何使用 python 來預測股票價格。 . 首先，我們先導入此項專案所需的所有必要 python 函式庫： . import numpy as np import pandas as pd from sklearn import preprocessing from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression . &#36039;&#26009;&#28310;&#20633; Data Preparation . 在這裡，我們先建立一個子程式，協助我們將等會讀取進來的資料進行切割： . def prepare_data(df,forecast_col,forecast_out,test_size): label = df[forecast_col].shift(-forecast_out) #建立一個新的序列，裡面的是5 {%forecast_out%}天後的股價（收盤價） X = np.array(df[[forecast_col]]) #建立序列 X = preprocessing.scale(X) #將訓練資料進行特徵標準化(normalization)工作 X_lately = X[-forecast_out:] #建立等會用來進行預測的資料(資料集中最後5 {%forecast_out%}天的股價（收盤價）) X = X[:-forecast_out] # 將資料集中最後的5{%forecast_out%}筆資料移除掉，亦即移除掉等下要作為預測用的資料 label.dropna(inplace=True) #通過**dropna()**過濾掉缺失的數據（亦即移除掉最後5筆數列） y = np.array(label) X_train, X_test, Y_train, Y_test = train_test_split(X, y, test_size=test_size, random_state=0) #切割數據集 response = [X_train,X_test , Y_train, Y_test , X_lately] return response . 為什麼要將資料進行切割呢？這是因為在機器學習的領域之中，資料將會分成以下4類資料來進行資料分析以及驗證： . 訓練資料 &lt;- 在訓練模型時所依據的基礎資料 | 訓練資料所對應的歷史結果 &lt;- 在訓練模型時，透過基礎資料與歷史結果的關係，來建立數據模型 | 測試資料 &lt;- 在數據模型建立之後，作為模型驗證實的基礎資料 | 測試資料所對應的歷史結果 &lt;- 在訓練資料透過數據模模演算後的結過（預測），與相對應的歷史結果進行比較，以了解數據麼型的準確程度 | (上述的4類資料，都是來自於歷史資料) . 接下來，我們開始讀取要進行分析的股價資料（以TESLA股價為例） . df = pd.read_csv(&quot;datasource/TSLA.csv&quot;) . 現在，我準備建立三個輸入變量供上面創建的子程式使用。包含了我們想要預測的資料欄位、訓練及驗證資料的分割比例、以及我們預計預測的天數。 . forecast_col = &#39;Close&#39; # 在這個練習中，我選擇收盤價欄位作為訓練模型以及預測的欄位 forecast_out = 5 # 在這個練習中，我規劃預測 5 天後的TESLA的收盤價 test_size = 0.2 # 在這個練習中，我預計用來進行模型驗證的資料比例（在大多數的案例中，會採用20%。也就是0.2作為模型驗證之用） . &#24314;&#31435;&#20006;&#25033;&#29992;&#32929;&#20729;&#38928;&#28204;&#27169;&#22411; . 現在，我們開始將匯入的資料進行切割，並據此開始訓練線性回歸模型： . X_train, X_test, Y_train, Y_test , X_lately =prepare_data(df,forecast_col,forecast_out,test_size); learner = LinearRegression() #定義以及初始化線性回歸模型 learner.fit(X_train,Y_train) #訓練線性回歸模型 . LinearRegression() . 到這裡，模型已經訓練並且建立完畢，我們可以快速地了解模型準確度餅開始進行預測！ . score=learner.score(X_test,Y_test) # 了解一下這個模型的準確程度（透過驗證資料比對） forecast= learner.predict(X_lately) # 提供基礎資料進行模型演算餅取得預測結果 （5 天後的TESLA的收盤價） response={} # creting json object response[&#39;模型分數&#39;]=score response[&#39;預測價格&#39;]=forecast print(response) . {&#39;模型分數&#39;: 0.7901258449593493, &#39;預測價格&#39;: array([738.10424235, 739.67504036, 747.39116981, 741.79828889, 722.43892968])} . &#32317;&#32080; . 這就是我們如何學習透過 Python 和機器學習中的線性回歸模型來預測股票價格。 希望你喜歡這篇文章。 .",
            "url": "https://impepper.github.io/myPortfolio/python/prediction/jupyter/linear%20regression/stock%20price/2022/02/12/Stock-Price-Prediction.html",
            "relUrl": "/python/prediction/jupyter/linear%20regression/stock%20price/2022/02/12/Stock-Price-Prediction.html",
            "date": " • Feb 12, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "nbdev + GitHub Codespaces: A New Literate Programming Environment",
            "content": "Today, we are going to show you how to set up a literate programming environment, allowing you to use an IDE (VS Code) and an interactive computing environment (Jupyter), without leaving your browser, for free, in under 5 minutes. You’ll even see how VSCode and Jupyter work together automatically! But first, what is literate programming? And how did I go from skeptic to a zealot of literate programming? . Introduction . Literate programming is a programming paradigm introduced by Donald Knuth in which a computer program is given an explanation of its logic in a natural language, such as English, interspersed with snippets of macros and traditional source code, from which compilable source code can be generated. According to Knuth, literate programming provides higher-quality programs by forcing programmers to explicitly state the thoughts behind the program. This process makes poorly thought-out design decisions more obvious. Knuth also claims that literate programming provides a first-rate documentation system, which is not an add-on, but is grown naturally in the process of exposition of one’s thoughts during a program’s creation. 1 . When I first learned about literate programming, I was quite skeptical. For the longest time, I had wrongly equated Jupyter notebooks with literate programming. Indeed, Jupyter is a brilliant interactive computing system, which was awarded the Association of Computing Machinery (ACM) Software System Award, and is loved by many developers. However, Jupyter falls short of the literate programming paradigm for the following reasons:2 . It can be difficult to compile source code from notebooks. | It can be difficult to diff and use version control with notebooks because they are not stored in plain text. | It is not clear how to automatically generate documentation from notebooks. | It is not clear how to properly run tests suites when writing code in notebooks. | . My skepticism quickly evaporated when I began using nbdev, a project that extends notebooks to complete the literate programming ideal. I spent a month, full time, using nbdev while contributing to the python library fastcore, and can report that Donald Knuth was definitely onto something. The process of writing prose and tests alongside code forced me to deeply understand why the code does what it does, and to think deeply about its design. Furthermore, the reduced cognitive load and speed of iteration of having documentation, code, and tests in one location boosted my productivity to levels I have never before experienced as a software developer. Furthermore, I found that developing this way bolstered collaboration such that code reviews not only happened faster but were more meaningful. In short, nbdev may be the most profound productivity tool I have ever used. . As a teaser, look how easy it is to instantiate this literate programming environment, which includes a notebook, a docs site and an IDE with all dependencies pre-installed! :point_down: . . Features of nbdev . As discussed in the docs, nbdev provides the following features: . Searchable, hyperlinked documentation, which can be automatically hosted on GitHub Pages for free. | Python modules, following best practices such as automatically defining __all__ with your exported functions, classes, and variables. | Pip and Conda installers. | Tests defined directly in notebooks which run in parallel. This testing system has been thoroughly tested with GitHub Actions. | Navigate and edit your code in a standard text editor or IDE, and export any changes automatically back into your notebooks. | . Since you are in a notebook, you can also add charts, text, links, images, videos, etc, that are included automatically in the documentation of your library, along with standardized documentation generated automatically from your code. This site is an example of docs generated automatically by nbdev. . GitHub Codespaces . Thanks to Conda and nbdev_template, setting up a development environment with nbdev is far easier than it used to be. However, we realized it could be even easier, thanks to a new GitHub product called Codespaces. Codespaces is a fully functional development environment in your browser, accessible directly from GitHub, that provides the following features: . A full VS Code IDE. | An environment that has files from the repository mounted into the environment, along with your GitHub credentials. | A development environment with dependencies pre-installed, backed by Docker. | The ability to serve additional applications on arbitrary ports. For nbdev, we serve a Jupyter notebook server as well as a Jekyll based documentation site. | A shared file system, which facilitates editing code in one browser tab and rendering the results in another. | … and more. | Codespaces enables developers to immediately participate in a project without wasting time on DevOps or complicated setup steps. Most importantly, CodeSpaces with nbdev allows developers to quickly get started with creating their own software with literate programming. . A demo of nbdev + Codespaces . This demo uses the project fastai/fastcore, which was built with nbdev, as an example. First, we can navigate to this repo and launch a Codespace: . . If you are launching a fresh Codespace, it may take several minutes to set up. Once the environment is ready, we can verify that all dependencies we want are installed (in this case fastcore and nbdev): . . Additionally, we can serve an arbitrary number of applications on user-specified ports, which we can open through VSCode as shown below: . . In this case, these applications are a notebook and docs site. Changes to a notebook are reflected immediately in the data docs. Furthermore, we can use the cli command nbdev_build_lib to sync our notebooks with python modules. This functionality is shown below: . . This is amazing! With a click of a button, I was able to: . Launch an IDE with all dependencies pre-installed. | Launch two additional applications: a Jupyter Notebook server on port 8080 and a docs site on port 4000. | Automatically update the docs and modules every time I make a change to a Jupyter notebook. | This is just the tip of the iceberg. There are additional utilities for writing and executing tests, diffing notebooks, special flags for hiding, showing, and collapsing cells in the generated docs, as well as git hooks for automation. This and more functionality is covered in the nbdev docs. . Give It A Try For Yourself . To try out nbdev yourself, take this tutorial, which will walk you through everything you need to know. The tutorial also shows you how to use a repository template with the configuration files necessary to enable Codespaces with nbdev. . You Can Write Blogs With Notebooks, Too! . This blog post was written in fastpages which is also built on nbdev! We recommend fastpages if you want an easy way to blog with Jupyter notebooks. . Additional Resources . The GitHub Codepaces site. | The official docs for Codespaces. | The nbdev docs. | The nbdev GitHub repo. | fastpages: The project used to write this blog. | The GitHub repo fastai/fastcore, which is what we used in this blog post as an example. | . Wikipedia article: Literate Programming &#8617; . | This is not a criticism of Jupyter. Jupyter doesn’t claim to be a full literate programming system. However, people can sometimes (unfairly) judge Jupyter according to this criteria. &#8617; . |",
            "url": "https://impepper.github.io/myPortfolio/codespaces",
            "relUrl": "/codespaces",
            "date": " • Dec 10, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "Introducing fastlinkcheck",
            "content": ". Motivation . Recently, fastai has been hard at work improving and overhauling nbdev, a literate programming environment for python. A key feature of nbdev is automated generation of documentation from Jupyter notebooks. This documentation system adds many niceties, such as the following types of hyperlinks automatically: . Links to source code on GitHub. | Links to both internal and external documentation by introspecting variable names in backticks. | . Because documentation is so easy to create and maintain in nbdev, we find ourselves and others creating much more of it! In addition to automatic hyperlinks, we often include our own links to relevant websites, blogs and videos when documenting code. For example, one of the largest nbdev generated sites, docs.fast.ai, has more than 300 external and internal links at the time of this writing. . The Solution . Due to the continued popularity of fastai and the growth of new nbdev projects, grooming these links manually became quite tedious. We investigated solutions that could verify links for us automatically, but were not satisfied with any existing solutions. These are the features we desired: . A platform independent solution that is not tied to a specific static site generator like Jekyll or Hugo. | Intelligent introspection of external links that are actually internal links. For example, if we are building the site docs.fast.ai, a link to https://docs.fast.ai/tutorial should not result in a web request, but rather introspection of the local file system for the presence of tutorial.html in the right location. | Verification of any links to assets like CSS, data, javascript or other files. | Logs that are well organized that allow us to see each broken link or reference to a non-existent path, and the pages these are found in. | Parallelism to verify links as fast as possible. | Lightweight, easy to install with minimal dependencies. | . We tried tools such as linkchecker and pylinkvalidator, but these required your site to be first be hosted. Since we wanted to check links on a static site, hosting is overhead we wanted to avoid. . This is what led us to create fastlinkcheck, which we discuss below. . Note: For Ruby users, htmlproofer apperas to provide overlapping functionality. We have not tried this library. . A tour of fastlinkcheck . For this tour we will be referring to the files in the fastlinkcheck repo. You should clone this repo in the current directory in order to follow along: . git clone https://github.com/fastai/fastlinkcheck.git cd fastlinkcheck . Cloning into &#39;fastlinkcheck&#39;... remote: Enumerating objects: 135, done. remote: Counting objects: 100% (135/135), done. remote: Compressing objects: 100% (98/98), done. remote: Total 608 (delta 69), reused 76 (delta 34), pack-reused 473 Receiving objects: 100% (608/608), 1.12 MiB | 10.47 MiB/s, done. Resolving deltas: 100% (302/302), done. . Installation . You can install fastlinkcheck with pip: . pip install fastlinkcheck . Usage . After installing fastlinkcheck, the cli command link_check is available from the command line. We can see various options with the --help flag. . link_check --help . usage: link_check [-h] [--host HOST] [--config_file CONFIG_FILE] [--pdb] [--xtra XTRA] path Check for broken links recursively in `path`. positional arguments: path Root directory searched recursively for HTML files optional arguments: -h, --help show this help message and exit --host HOST Host and path (without protocol) of web server --config_file CONFIG_FILE Location of file with urls to ignore --pdb Run in pdb debugger (default: False) --xtra XTRA Parse for additional args (default: &#39;&#39;) . From the root of fastlinkcheck repo, We can search the directory _example/broken_links recursively for broken links like this: . link_check _example/broken_links . ERROR: The Following Broken Links or Paths were found: - &#39;http://fastlinkcheck.com/test.html&#39; was found in the following pages: - `/Users/hamelsmu/github/fastlinkcheck/_example/broken_links/test.html` - &#39;http://somecdn.com/doesntexist.html&#39; was found in the following pages: - `/Users/hamelsmu/github/fastlinkcheck/_example/broken_links/test.html` - Path(&#39;/Users/hamelsmu/github/fastlinkcheck/_example/broken_links/test.js&#39;) was found in the following pages: - `/Users/hamelsmu/github/fastlinkcheck/_example/broken_links/test.html` . . Specifying the --host parameter allows you detect links that are internal by identifying links with that host name. External links are verified by making a request to the appropriate website. On the other hand, internal links are verified by inspecting the presence and content of local files. . We must be careful when using the --host argument to only pass the host (and path, if necessary) without the protocol. For example, this is how we specify the hostname if your site&#39;s url is http://fastlinkcheck.com/test.html: . link_check _example/broken_links --host fastlinkcheck.com . ERROR: The Following Broken Links or Paths were found: - &#39;http://somecdn.com/doesntexist.html&#39; was found in the following pages: - `/Users/hamelsmu/github/fastlinkcheck/_example/broken_links/test.html` - Path(&#39;/Users/hamelsmu/github/fastlinkcheck/_example/broken_links/test.js&#39;) was found in the following pages: - `/Users/hamelsmu/github/fastlinkcheck/_example/broken_links/test.html` . . We now have one less broken link as there is indeed a file named test.html in the root of the path we are searching. However, if we add a path to the end of --host , such as fastlinkcheck.com/mysite the link would again be listed as broken because _example/broken_links/mysite/test.html does not exist: . link_check _example/broken_links --host fastlinkcheck.com/mysite . ERROR: The Following Broken Links or Paths were found: - &#39;http://fastlinkcheck.com/test.html&#39; was found in the following pages: - `/Users/hamelsmu/github/fastlinkcheck/_example/broken_links/test.html` - &#39;http://somecdn.com/doesntexist.html&#39; was found in the following pages: - `/Users/hamelsmu/github/fastlinkcheck/_example/broken_links/test.html` - Path(&#39;/Users/hamelsmu/github/fastlinkcheck/_example/broken_links/test.js&#39;) was found in the following pages: - `/Users/hamelsmu/github/fastlinkcheck/_example/broken_links/test.html` . . You can ignore links by creating a text file that contains a list of urls and paths to ignore. For example, the file _example/broken_links/linkcheck.rc contains: . cat _example/broken_links/linkcheck.rc . test.js https://www.google.com . We can use this file to ignore urls and paths with the --config_file argument. This will filter out references to the broken link /test.js from our earlier results: . link_check _example/broken_links --host fastlinkcheck.com --config_file _example/broken_links/linkcheck.rc . ERROR: The Following Broken Links or Paths were found: - &#39;http://somecdn.com/doesntexist.html&#39; was found in the following pages: - `/Users/hamelsmu/github/fastlinkcheck/_example/broken_links/test.html` . . Finally, if there are no broken links, link_check will not return anything. The directory _example/no_broken_links/ does not contain any HTML files with broken links: . link_check _example/no_broken_links . No broken links found! . Python . You can also use these utilities from python instead of the terminal. Please see these docs for more information. . Using link_check in GitHub Actions . The link_check CLI utility that is installed with fastlinkcheck can be very useful in continuous integration systems like GitHub Actions. Here is an example GitHub Actions workflow that uses link_check: . name: Check Links on: [workflow_dispatch, push] jobs: check-links: runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 - uses: actions/setup-python@v2 - name: check for broken links run: | pip install fastlinkcheck link_check _example . We can a few more lines of code to open an issue instead when a broken link is found, using the gh cli: . ... - name: check for broken links run: | pip install fastlinkcheck link_check _example 2&gt; err || true export GITHUB_TOKEN=&quot;YOUR_TOKEN&quot; [[ -s err ]] &amp;&amp; gh issue create -t &quot;Broken links found&quot; -b &quot;$(&lt; err)&quot; -R &quot;yourusername/yourrepo&quot; . We can extend this even further to only open an issue when another issue with a specific label isn&#39;t already open: . ... - name: check for broken links run: | pip install fastlinkcheck link_check &quot;docs/_site&quot; --host &quot;docs.fast.ai&quot; 2&gt; err || true export GITHUB_TOKEN=&quot;YOUR_TOKEN&quot; if [[ -z $(gh issue list -l &quot;broken-link&quot;)) &amp;&amp; (-s err) ]]; then gh issue create -t &quot;Broken links found&quot; -b &quot;$(&lt; err)&quot; -l &quot;broken-link&quot; -R &quot;yourusername/yourrepo&quot; fi . See the GitHub Actions docs for more information. . Resources . The following resources are relevant for those interested in learning more about fastlinkcheck: . The fastlinkcheck GitHub repo | The fastlinkcheck docs | .",
            "url": "https://impepper.github.io/myPortfolio/fastlinkcheck/",
            "relUrl": "/fastlinkcheck/",
            "date": " • Nov 17, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "fastcore: An Underrated Python Library",
            "content": ". Background . I recently embarked on a journey to sharpen my python skills: I wanted to learn advanced patterns, idioms, and techniques. I started with reading books on advanced Python, however, the information didn&#39;t seem to stick without having somewhere to apply it. I also wanted the ability to ask questions from an expert while I was learning -- which is an arrangement that is hard to find! That&#39;s when it occurred to me: What if I could find an open source project that has fairly advanced python code and write documentation and tests? I made a bet that if I did this it would force me to learn everything very deeply, and the maintainers would be appreciative of my work and be willing to answer my questions. . And that&#39;s exactly what I did over the past month! I&#39;m pleased to report that it has been the most efficient learning experience I&#39;ve ever experienced. I&#39;ve discovered that writing documentation forced me to deeply understand not just what the code does but also why the code works the way it does, and to explore edge cases while writing tests. Most importantly, I was able to ask questions when I was stuck, and maintainers were willing to devote extra time knowing that their mentorship was in service of making their code more accessible! It turns out the library I choose, fastcore is some of the most fascinating Python I have ever encountered as its purpose and goals are fairly unique. . For the uninitiated, fastcore is a library on top of which many fast.ai projects are built on. Most importantly, fastcore extends the python programming language and strives to eliminate boilerplate and add useful functionality for common tasks. In this blog post, I&#39;m going to highlight some of my favorite tools that fastcore provides, rather than sharing what I learned about python. My goal is to pique your interest in this library, and hopefully motivate you to check out the documentation after you are done to learn more! . Why fastcore is interesting . Get exposed to ideas from other languages without leaving python: I’ve always heard that it is beneficial to learn other languages in order to become a better programmer. From a pragmatic point of view, I’ve found it difficult to learn other languages because I could never use them at work. Fastcore extends python to include patterns found in languages as diverse as Julia, Ruby and Haskell. Now that I understand these tools I am motivated to learn other languages. | You get a new set of pragmatic tools: fastcore includes utilities that will allow you to write more concise expressive code, and perhaps solve new problems. | Learn more about the Python programming language: Because fastcore extends the python programming language, many advanced concepts are exposed during the process. For the motivated, this is a great way to see how many of the internals of python work. | A whirlwind tour through fastcore . Here are some things you can do with fastcore that immediately caught my attention. . . Making **kwargs transparent . Whenever I see a function that has the argument **kwargs, I cringe a little. This is because it means the API is obfuscated and I have to read the source code to figure out what valid parameters might be. Consider the below example: . def baz(a, b=2, c=3, d=4): return a + b + c def foo(c, a, **kwargs): return c + baz(a, **kwargs) inspect.signature(foo) . &lt;Signature (c, a, **kwargs)&gt; . Without reading the source code, it might be hard for me to know that foo also accepts and additional parameters b and d. We can fix this with delegates: . def baz(a, b=2, c=3, d=4): return a + b + c @delegates(baz) # this decorator will pass down keyword arguments from baz def foo(c, a, **kwargs): return c + baz(a, **kwargs) inspect.signature(foo) . &lt;Signature (c, a, b=2, d=4)&gt; . You can customize the behavior of this decorator. For example, you can have your cake and eat it too by passing down your arguments and also keeping **kwargs: . @delegates(baz, keep=True) def foo(c, a, **kwargs): return c + baz(a, **kwargs) inspect.signature(foo) . &lt;Signature (c, a, b=2, d=4, **kwargs)&gt; . You can also exclude arguments. For example, we exclude argument d from delegation: . def basefoo(a, b=2, c=3, d=4): pass @delegates(basefoo, but=[&#39;d&#39;]) # exclude `d` def foo(c, a, **kwargs): pass inspect.signature(foo) . &lt;Signature (c, a, b=2)&gt; . You can also delegate between classes: . class BaseFoo: def __init__(self, e, c=2): pass @delegates()# since no argument was passsed here we delegate to the superclass class Foo(BaseFoo): def __init__(self, a, b=1, **kwargs): super().__init__(**kwargs) inspect.signature(Foo) . &lt;Signature (a, b=1, c=2)&gt; . For more information, read the docs on delegates. . . Avoid boilerplate when setting instance attributes . Have you ever wondered if it was possible to avoid the boilerplate involved with setting attributes in __init__? . class Test: def __init__(self, a, b ,c): self.a, self.b, self.c = a, b, c . Ouch! That was painful. Look at all the repeated variable names. Do I really have to repeat myself like this when defining a class? Not Anymore! Checkout store_attr: . class Test: def __init__(self, a, b, c): store_attr() t = Test(5,4,3) assert t.b == 4 . You can also exclude certain attributes: . class Test: def __init__(self, a, b, c): store_attr(but=[&#39;c&#39;]) t = Test(5,4,3) assert t.b == 4 assert not hasattr(t, &#39;c&#39;) . There are many more ways of customizing and using store_attr than I highlighted here. Check out the docs for more detail. . P.S. you might be thinking that Python dataclasses also allow you to avoid this boilerplate. While true in some cases, store_attr is more flexible.1 . 1. For example, store_attr does not rely on inheritance, which means you won&#39;t get stuck using multiple inheritance when using this with your own classes. Also, unlike dataclasses, store_attr does not require python 3.7 or higher. Furthermore, you can use store_attr anytime in the object lifecycle, and in any location in your class to customize the behavior of how and when variables are stored.↩ . . Avoiding subclassing boilerplate . One thing I hate about python is the __super__().__init__() boilerplate associated with subclassing. For example: . class ParentClass: def __init__(self): self.some_attr = &#39;hello&#39; class ChildClass(ParentClass): def __init__(self): super().__init__() cc = ChildClass() assert cc.some_attr == &#39;hello&#39; # only accessible b/c you used super . We can avoid this boilerplate by using the metaclass PrePostInitMeta. We define a new class called NewParent that is a wrapper around the ParentClass: . class NewParent(ParentClass, metaclass=PrePostInitMeta): def __pre_init__(self, *args, **kwargs): super().__init__() class ChildClass(NewParent): def __init__(self):pass sc = ChildClass() assert sc.some_attr == &#39;hello&#39; . . Type Dispatch . Type dispatch, or Multiple dispatch, allows you to change the way a function behaves based upon the input types it receives. This is a prominent feature in some programming languages like Julia. For example, this is a conceptual example of how multiple dispatch works in Julia, returning different values depending on the input types of x and y: . collide_with(x::Asteroid, y::Asteroid) = ... # deal with asteroid hitting asteroid collide_with(x::Asteroid, y::Spaceship) = ... # deal with asteroid hitting spaceship collide_with(x::Spaceship, y::Asteroid) = ... # deal with spaceship hitting asteroid collide_with(x::Spaceship, y::Spaceship) = ... # deal with spaceship hitting spaceship . Type dispatch can be especially useful in data science, where you might allow different input types (i.e. Numpy arrays and Pandas dataframes) to a function that processes data. Type dispatch allows you to have a common API for functions that do similar tasks. . Unfortunately, Python does not support this out-of-the box. Fortunately, there is the @typedispatch decorator to the rescue. This decorator relies upon type hints in order to route inputs the correct version of the function: . @typedispatch def f(x:str, y:str): return f&#39;{x}{y}&#39; @typedispatch def f(x:np.ndarray): return x.sum() @typedispatch def f(x:int, y:int): return x+y . Below is a demonstration of type dispatch at work for the function f: . f(&#39;Hello &#39;, &#39;World!&#39;) . &#39;Hello World!&#39; . f(2,3) . 5 . f(np.array([5,5,5,5])) . 20 . There are limitations of this feature, as well as other ways of using this functionality that you can read about here. In the process of learning about typed dispatch, I also found a python library called multipledispatch made by Mathhew Rocklin (the creator of Dask). . After using this feature, I am now motivated to learn languages like Julia to discover what other paradigms I might be missing. . . A better version of functools.partial . functools.partial is a great utility that creates functions from other functions that lets you set default values. Lets take this function for example that filters a list to only contain values &gt;= val: . test_input = [1,2,3,4,5,6] def f(arr, val): &quot;Filter a list to remove any values that are less than val.&quot; return [x for x in arr if x &gt;= val] f(test_input, 3) . [3, 4, 5, 6] . You can create a new function out of this function using partial that sets the default value to 5: . filter5 = partial(f, val=5) filter5(test_input) . [5, 6] . One problem with partial is that it removes the original docstring and replaces it with a generic docstring: . filter5.__doc__ . &#39;partial(func, *args, **keywords) - new function with partial application n of the given arguments and keywords. n&#39; . fastcore.utils.partialler fixes this, and makes sure the docstring is retained such that the new API is transparent: . filter5 = partialler(f, val=5) filter5.__doc__ . &#39;Filter a list to remove any values that are less than val.&#39; . . Composition of functions . A technique that is pervasive in functional programming languages is function composition, whereby you chain a bunch of functions together to achieve some kind of result. This is especially useful when applying various data transformations. Consider a toy example where I have three functions: (1) Removes elements of a list less than 5 (from the prior section) (2) adds 2 to each number (3) sums all the numbers: . def add(arr, val): return [x + val for x in arr] def arrsum(arr): return sum(arr) # See the previous section on partialler add2 = partialler(add, val=2) transform = compose(filter5, add2, arrsum) transform([1,2,3,4,5,6]) . 15 . But why is this useful? You might me thinking, I can accomplish the same thing with: . arrsum(add2(filter5([1,2,3,4,5,6]))) . You are not wrong! However, composition gives you a convenient interface in case you want to do something like the following: . def fit(x, transforms:list): &quot;fit a model after performing transformations&quot; x = compose(*transforms)(x) y = [np.mean(x)] * len(x) # its a dumb model. Don&#39;t judge me return y # filters out elements &lt; 5, adds 2, then predicts the mean fit(x=[1,2,3,4,5,6], transforms=[filter5, add2]) . [7.5, 7.5] . For more information about compose, read the docs. . . A more useful __repr__ . In python, __repr__ helps you get information about an object for logging and debugging. Below is what you get by default when you define a new class. (Note: we are using store_attr, which was discussed earlier). . class Test: def __init__(self, a, b=2, c=3): store_attr() # `store_attr` was discussed previously Test(1) . &lt;__main__.Test at 0x7ffcd766cee0&gt; . We can use basic_repr to quickly give us a more sensible default: . class Test: def __init__(self, a, b=2, c=3): store_attr() __repr__ = basic_repr(&#39;a,b,c&#39;) Test(2) . Test(a=2, b=2, c=3) . . Monkey Patching With A Decorator . It can be convenient to monkey patch with a decorator, which is especially helpful when you want to patch an external library you are importing. We can use the decorator @patch from fastcore.foundation along with type hints like so: . class MyClass(int): pass @patch def func(self:MyClass, a): return self+a mc = MyClass(3) . Now, MyClass has an additional method named func: . mc.func(10) . 13 . Still not convinced? I&#39;ll show you another example of this kind of patching in the next section. . . A better pathlib.Path . When you see these extensions to pathlib.path you won&#39;t ever use vanilla pathlib again! A number of additional methods have been added to pathlib, such as: . Path.readlines: same as with open(&#39;somefile&#39;, &#39;r&#39;) as f: f.readlines() | Path.read: same as with open(&#39;somefile&#39;, &#39;r&#39;) as f: f.read() | Path.save: saves file as pickle | Path.load: loads pickle file | Path.ls: shows the contents of the path as a list. | etc. | . Read more about this here. Here is a demonstration of ls: . from fastcore.utils import * from pathlib import Path p = Path(&#39;.&#39;) p.ls() # you don&#39;t get this with vanilla Pathlib.Path!! . (#7) [Path(&#39;2020-09-01-fastcore.ipynb&#39;),Path(&#39;README.md&#39;),Path(&#39;fastcore_imgs&#39;),Path(&#39;2020-02-20-test.ipynb&#39;),Path(&#39;.ipynb_checkpoints&#39;),Path(&#39;2020-02-21-introducing-fastpages.ipynb&#39;),Path(&#39;my_icons&#39;)] . Wait! What&#39;s going on here? We just imported pathlib.Path - why are we getting this new functionality? Thats because we imported the fastcore.utils module, which patches this module via the @patch decorator discussed earlier. Just to drive the point home on why the @patch decorator is useful, I&#39;ll go ahead and add another method to Path right now: . @patch def fun(self:Path): return &quot;This is fun!&quot; p.fun() . &#39;This is fun!&#39; . That is magical, right? I know! That&#39;s why I&#39;m writing about it! . . An Even More Concise Way To Create Lambdas . Self, with an uppercase S, is an even more concise way to create lambdas that are calling methods on an object. For example, let&#39;s create a lambda for taking the sum of a Numpy array: . arr=np.array([5,4,3,2,1]) f = lambda a: a.sum() assert f(arr) == 15 . You can use Self in the same way: . f = Self.sum() assert f(arr) == 15 . Let&#39;s create a lambda that does a groupby and max of a Pandas dataframe: . import pandas as pd df=pd.DataFrame({&#39;Some Column&#39;: [&#39;a&#39;, &#39;a&#39;, &#39;b&#39;, &#39;b&#39;, ], &#39;Another Column&#39;: [5, 7, 50, 70]}) f = Self.groupby(&#39;Some Column&#39;).mean() f(df) . Another Column . Some Column . a 6 | . b 60 | . Read more about Self in the docs). . . Notebook Functions . These are simple but handy, and allow you to know whether or not code is executing in a Jupyter Notebook, Colab, or an Ipython Shell: . from fastcore.imports import in_notebook, in_colab, in_ipython in_notebook(), in_colab(), in_ipython() . (True, False, True) . This is useful if you are displaying certain types of visualizations, progress bars or animations in your code that you may want to modify or toggle depending on the environment. . . A Drop-In Replacement For List . You might be pretty happy with Python&#39;s list. This is one of those situations that you don&#39;t know you needed a better list until someone showed one to you. Enter L, a list like object with many extra goodies. . The best way I can describe L is to pretend that list and numpy had a pretty baby: . define a list (check out the nice __repr__ that shows the length of the list!) . L(1,2,3) . (#3) [1,2,3] . Shuffle a list: . p = L.range(20).shuffle() p . (#20) [8,7,5,12,14,16,2,15,19,6...] . Index into a list: . p[2,4,6] . (#3) [5,14,2] . L has sensible defaults, for example appending an element to a list: . 1 + L(2,3,4) . (#4) [1,2,3,4] . There is much more L has to offer. Read the docs to learn more. . But Wait ... There&#39;s More! . There are more things I would like to show you about fastcore, but there is no way they would reasonably fit into a blog post. Here is a list of some of my favorite things that I didn&#39;t demo in this blog post: . Utilities . The Basics section contain many shortcuts to perform common tasks or provide an additional interface to what standard python provides. . mk_class: quickly add a bunch of attributes to a class | wrap_class: add new methods to a class with a simple decorator | groupby: similar to Scala&#39;s groupby | merge: merge dicts | fasttuple: a tuple on steroids | Infinite Lists: useful for padding and testing | chunked: for batching and organizing stuff | . Multiprocessing . The Multiprocessing section extends python&#39;s multiprocessing library by offering features like: . progress bars | ability to pause to mitigate race conditions with external services | processing things in batches on each worker, ex: if you have a vectorized operation to perform in chunks | . Functional Programming . The functional programming section is my favorite part of this library. . maps: a map that also composes functions | mapped: A more robust map | using_attr: compose a function that operates on an attribute | . Transforms . Transforms is a collection of utilities for creating data transformations and associated pipelines. These transformation utilities build upon many of the building blocks discussed in this blog post. . Further Reading . It should be noted that you should read the main page of the docs first, followed by the section on tests to fully understand the documentation. . The fastcore documentation site. | The fastcore GitHub repo. | Blog post on delegation. | . Shameless plug: fastpages . This blog post was written entirely in a Jupyter Notebook, which GitHub automatically converted into to a blog post! Sound interesting? Check out fastpages. .",
            "url": "https://impepper.github.io/myPortfolio/fastcore/",
            "relUrl": "/fastcore/",
            "date": " • Sep 1, 2020"
        }
        
    
  
    
        ,"post6": {
            "title": "GitHub Actions: Providing Data Scientists With New Superpowers",
            "content": "What Superpowers? . Hi, I’m Hamel Husain. I’m a machine learning engineer at GitHub. Recently, GitHub released a new product called GitHub Actions, which has mostly flown under the radar in the machine learning and data science community as just another continuous integration tool. . Recently, I’ve been able to use GitHub Actions to build some very unique tools for Data Scientists, which I want to share with you today. Most importantly, I hope to get you excited about GitHub Actions, and the promise it has for giving you new superpowers as a Data Scientist. Here are two projects I recently built with Actions that show off its potential: . fastpages . fastpages is an automated, open-source blogging platform with enhanced support for Jupyter notebooks. You save your notebooks, markdown, or Word docs into a directory on GitHub, and they automatically become blog posts. Read the announcement below: . We&#39;re launching `fastpages`, a platform which allows you to host a blog for free, with no ads. You can blog with @ProjectJupyter notebooks, @office Word, directly from @github&#39;s markdown editor, etc.Nothing to install, &amp; setup is automated!https://t.co/dNSA0oQUrN . &mdash; Jeremy Howard (@jeremyphoward) February 24, 2020 Machine Learning Ops . Wouldn’t it be cool if you could invoke a chatbot natively on GitHub to test your machine learning models on the infrastructure of your choice (GPUs), log all the results, and give you a rich report back in a pull request so that everyone could see the results? You can with GitHub Actions! . Consider the below annotated screenshot of this Pull Request: . . A more in-depth explanation about the above project can be viewed in this video: . Using GitHub Actions for machine learning workflows is starting to catch on. Julien Chaumond, CTO of Hugging Face, says: . GitHub Actions are great because they let us do CI on GPUs (as most of our users use the library on GPUs not on CPUs), on our own infra! 1 . Additionally, you can host a GitHub Action for other people so others can use parts of your workflow without having to re-create your steps. I provide examples of this below. . A Gentle Introduction To GitHub Actions . What Are GitHub Actions? . GitHub Actions allow you to run arbitrary code in response to events. Events are activities that happen on GitHub such as: . Opening a pull request | Making an issue comment | Labeling an issue | Creating a new branch | … and many more | . When an event is created, the GitHub Actions context is hydrated with a payload containing metadata for that event. Below is an example of a payload that is received when an issue is created: . { &quot;action&quot;: &quot;created&quot;, &quot;issue&quot;: { &quot;id&quot;: 444500041, &quot;number&quot;: 1, &quot;title&quot;: &quot;Spelling error in the README file&quot;, &quot;user&quot;: { &quot;login&quot;: &quot;Codertocat&quot;, &quot;type&quot;: &quot;User&quot;, }, &quot;labels&quot;: [ { &quot;id&quot;: 1362934389, &quot;node_id&quot;: &quot;MDU6TGFiZWwxMzYyOTM0Mzg5&quot;, &quot;name&quot;: &quot;bug&quot;, } ], &quot;body&quot;: &quot;It looks like you accidently spelled &#39;commit&#39; with two &#39;t&#39;s.&quot; } . This functionality allows you to respond to various events on GitHub in an automated way. In addition to this payload, GitHub Actions also provide a plethora of variables and environment variables that afford easy to access metadata such as the username and the owner of the repo. Additionally, other people can package useful functionality into an Action that other people can inherit. For example, consider the below Action that helps you publish python packages to PyPi: . The Usage section describes how this Action can be used: . - name: Publish a Python distribution to PyPI uses: pypa/gh-action-pypi-publish@master with: user: __token__ password: ${{ secrets.pypi_password }} . This Action expects two inputs: user and a password. You will notice that the password is referencing a variable called secrets, which is a variable that contains an encrypted secret that you can upload to your GitHub repository. There are thousands of Actions (that are free) for a wide variety of tasks that can be discovered on the GitHub Marketplace. The ability to inherit ready-made Actions in your workflow allows you to accomplish complex tasks without implementing all of the logic yourself. Some useful Actions for those getting started are: . actions/checkout: Allows you to quickly clone the contents of your repository into your environment, which you often want to do. This does a number of other things such as automatically mount your repository’s files into downstream Docker containers. | mxschmitt/action-tmate: Proivdes a way to debug Actions interactively. This uses port forwarding to give you a terminal in the browser that is connected to your Actions runner. Be careful not to expose sensitive information if you use this. | actions/github-script: Gives you a pre-authenticated ocotokit.js client that allows you to interact with the GitHub API to accomplish almost any task on GitHub automatically. Only these endpoints are supported (for example, the secrets endpoint is not in that list). | . In addition to the aforementioned Actions, it is helpful to go peruse the official GitHub Actions docs before diving in. . Example: A fastpages Action Workflow . The best to way familiarize yourself with Actions is by studying examples. Let’s take a look at the Action workflow that automates the build of fastpages (the platform used to write this blog post). . Part 1: Define Workflow Triggers . First, we define triggers in ci.yaml. Like all Actions workflows, this is a YAML file located in the .github/workflows directory of the GitHub repo. . The top of this YAML file looks like this: . name: CI on: push: branches: - master pull_request: . This means that this workflow is triggered on either a push or pull request event. Furthermore, push events are filtered such that only pushes to the master branch will trigger the workflow, whereas all pull requests will trigger this workflow. It is important to note that pull requests opened from forks will have read-only access to the base repository and cannot access any secrets for security reasons. The reason for defining the workflow in this way is we wanted to trigger the same workflow to test pull requests as well as build and deploy the website when a PR is merged into master. This will be clarified as we step through the rest of the YAML file. . Part 2: Define Jobs . Next, we define jobs (there is only one in this workflow). Per the docs: . A workflow run is made up of one or more jobs. Jobs run in parallel by default. . jobs: build-site: if: ( github.event.commits[0].message != &#39;Initial commit&#39; ) || github.run_number &gt; 1 runs-on: ubuntu-latest steps: . The keyword build-site is the name of your job and you can name it whatever you want. In this case, we have a conditional if statement that dictates if this job should be run or not. We are trying to ensure that this workflow does not run when the first commit to a repo is made with the message ‘Initial commit’. The first variable in the if statement, github.event, contains a json payload of the event that triggered this workflow. When developing workflows, it is helpful to print this variable in order to inspect its structure, which you can accomplish with the following YAML: . - name: see payload run: | echo &quot;PAYLOAD: n${PAYLOAD} n&quot; env: PAYLOAD: ${{ toJSON(github.event) }} . Note: the above step is only for debugging and is not currently in the workflow. . toJson is a handy function that returns a pretty-printed JSON representation of the variable. The output is printed directly in the logs contained in the Actions tab of your repo. In this example, printing the payload for a push event will look like this (truncated for brevity): . { &quot;ref&quot;: &quot;refs/tags/simple-tag&quot;, &quot;before&quot;: &quot;6113728f27ae8c7b1a77c8d03f9ed6e0adf246&quot;, &quot;created&quot;: false, &quot;deleted&quot;: true, &quot;forced&quot;: false, &quot;base_ref&quot;: null, &quot;commits&quot;: [ { &quot;message&quot;: &quot;updated README.md&quot;, &quot;author&quot;: &quot;hamelsmu&quot; }, ], &quot;head_commit&quot;: null, } . Therefore, the variable github.event.commits[0].message will retrieve the first commit message in the array of commits. Since we are looking for situations where there is only one commit, this logic suffices. The second variable in the if statement, github.run_number is a special variable in Actions which: . [is a] unique number for each run of a particular workflow in a repository. This number begins at 1 for the workflow’s first run, and increments with each new run. This number does not change if you re-run the workflow run. . Therefore, the if statement introduced above: . if: ( github.event.commits[0].message != &#39;Initial commit&#39; ) || github.run_number &gt; 1 . Allows the workflow to run when the commit message is “Initial commit” as long as it is not the first commit. ( || is a logical or operator). . Finally, the line runs-on: ubuntu-latest specifies the host operating system that your workflows will run in. . Part 3: Define Steps . Per the docs: . A job contains a sequence of tasks called steps. Steps can run commands, run setup tasks, or run an Action in your repository, a public repository, or an Action published in a Docker registry. Not all steps run Actions, but all Actions run as a step. Each step runs in its own process in the runner environment and has access to the workspace and filesystem. Because steps run in their own process, changes to environment variables are not preserved between steps. GitHub provides built-in steps to set up and complete a job. . Below are the first two steps in our workflow: . - name: Copy Repository Contents uses: actions/checkout@master with: persist-credentials: false - name: convert notebooks and word docs to posts uses: ./_action_files . The first step creates a copy of your repository in the Actions file system, with the help of the utility action/checkout. This utility only fetches the last commit by default and saves files into a directory (whose path is stored in the environment variable GITHUB_WORKSPACE that is accessible by subsequent steps in your job. The second step runs the fastai/fastpages Action, which converts notebooks and word documents to blog posts automatically. In this case, the syntax: . uses: ./_action_files . is a special case where the pre-made GitHub Action we want to run happens to be defined in the same repo that runs this workflow. This syntax allows us to test changes to this pre-made Action when evaluating PRs by referencing the directory in the current repository that defines that pre-made Action. Note: Building pre-made Actions is beyond the scope of this tutorial. . The next three steps in our workflow are defined below: . - name: setup directories for Jekyll build run: | rm -rf _site sudo chmod -R 777 . - name: Jekyll build uses: docker://fastai/fastpages-jekyll with: args: bash -c &quot;gem install bundler &amp;&amp; jekyll build -V&quot; env: JEKYLL_ENV: &#39;production&#39; - name: copy CNAME file into _site if CNAME exists run: | sudo chmod -R 777 _site/ cp CNAME _site/ 2&gt;/dev/null || : . The step named setup directories for Jekyll build executes shell commands that remove the _site folder in order to get rid of stale files related to the page we want to build, as well as grant permissions to all the files in our repo to subsequent steps. . The step named Jekyll build executes a docker container hosted by the Jekyll community on Dockerhub called jekyll/jekyll. For those not familiar with Docker, see this tutorial. The name of this container is called fastai/fastpages-jekyll because I’m adding some additional dependencies to jekyll/jekyll and hosting those on my DockerHub account for faster build times2. The args parameter allows you to execute arbitrary commands with the Docker container by overriding the CMD instruction in the Dockerfile. We use this Docker container hosted on Dockerhub so we don’t have to deal with installing and configuring all of the complicated dependencies for Jekyll. The files from our repo are already available in the Actions runtime due to the first step in this workflow, and are mounted into this Docker container automatically for us. In this case, we are running the command jekyll build, which builds our website and places relevant assets them into the _site folder. For more information about Jekyll, read the official docs. Finally, the env parameter allows me to pass an environment variable into the Docker container. . The final command above copies a CNAME file into the _site folder, which we need for the custom domain https://fastpages.fast.ai. Setting up custom domains are outside the scope of this article. . The final step in our workflow is defined below: . - name: Deploy if: github.event_name == &#39;push&#39; uses: peaceiris/actions-gh-pages@v3 with: deploy_key: ${{ secrets.SSH_DEPLOY_KEY }} publish_dir: ./_site . The statement . if: github.event_name == &#39;push&#39; . uses the variable github.event_name to ensure this step only runs when a push event ( in this case only pushes to the master branch trigger this workflow) occur. . This step deploys the fastpages website by copying the contents of the _site folder to the root of the gh-pages branch, which GitHub Pages uses for hosting. This step uses the peaceiris/actions-gh-pages Action, pinned at version 3. Their README describes various options and inputs for this Action. . Conclusion . We hope that this has shed some light on how we use GitHub Actions to automate fastpages. While we only covered one workflow above, we hope this provides enough intuition to understand the other workflows in fastpages. We have only scratched the surface of GitHub Actions in this blog post, but we provide other materials below for those who want to dive in deeper. We have not covered how to host an Action for other people, but you can start with these docs to learn more. . Still confused about how GitHub Actions could be used for Data Science? Here are some ideas of things you can build: . Jupyter Widgets that trigger GitHub Actions to perform various tasks on GitHub via the repository dispatch event | Integration with Pachyderm for data versioning. | Integration with your favorite cloud machine learning services, such Sagemaker, Azure ML or GCP’s AI Platform. | . Related Materials . GitHub Actions official documentation | Hello world Docker Action: A template to demonstrate how to build a Docker Action for other people to use. | Awesome Actions: A curated list of interesting GitHub Actions by topic. | A tutorial on Docker for Data Scientists. | . Getting In Touch . Please feel free to get in touch with us on Twitter: . Hamel Husain @HamelHusain | Jeremy Howard @jeremyphoward | . . Footnotes . You can see some of Hugging Face’s Actions workflows for machine learning on GitHub &#8617; . | These additional dependencies are defined here, which uses the “jekyll build” command to add ruby dedpendencies from the Gemfile located at the root of the repo. Additionally, this docker image is built by another Action workflow defined here. &#8617; . |",
            "url": "https://impepper.github.io/myPortfolio/actions/markdown/2020/03/06/fastpages-actions.html",
            "relUrl": "/actions/markdown/2020/03/06/fastpages-actions.html",
            "date": " • Mar 6, 2020"
        }
        
    
  
    
        ,"post7": {
            "title": "Introducing fastpages",
            "content": ". We are very pleased to announce the immediate availability of fastpages. fastpages is a platform which allows you to create and host a blog for free, with no ads and many useful features, such as: . Create posts containing code, outputs of code (which can be interactive), formatted text, etc directly from Jupyter Notebooks; for instance see this great example post from Scott Hawley. Notebook posts support features such as: Interactive visualizations made with Altair remain interactive. | Hide or show cell input and output. | Collapsable code cells that are either open or closed by default. | Define the Title, Summary and other metadata via a special markdown cells | Ability to add links to Colab and GitHub automatically. | . | Create posts, including formatting and images, directly from Microsoft Word documents. | Create and edit Markdown posts entirely online using GitHub&#39;s built-in markdown editor. | Embed Twitter cards and YouTube videos. | Categorization of blog posts by user-supplied tags for discoverability. | ... and much more | . fastpages relies on Github pages for hosting, and Github Actions to automate the creation of your blog. The setup takes around three minutes, and does not require any technical knowledge or expertise. Due to built-in automation of fastpages, you don&#39;t have to fuss with conversion scripts. All you have to do is save your Jupyter notebook, Word document or markdown file into a specified directory and the rest happens automatically. Infact, this blog post is written in a Jupyter notebook, which you can see with the &quot;View on GitHub&quot; link above. . fast.ai have previously released a similar project called fast_template, which is even easier to set up, but does not support automatic creation of posts from Microsoft Word or Jupyter notebooks, including many of the features outlined above. . Because fastpages is more flexible and extensible, we recommend using it where possible. fast_template may be a better option for getting folks blogging who have no technical expertise at all, and will only be creating posts using Github&#39;s integrated online editor. . Setting Up Fastpages . The setup process of fastpages is automated with GitHub Actions, too! Upon creating a repo from the fastpages template, a pull request will automatically be opened (after ~ 30 seconds) configuring your blog so it can start working. The automated pull request will greet you with instructions like this: . . All you have to do is follow these instructions (in the PR you receive) and your new blogging site will be up and running! . Jupyter Notebooks &amp; Fastpages . In this post, we will cover special features that fastpages provides for Jupyter notebooks. You can also write your blog posts with Word documents or markdown in fastpages, which contain many, but not all the same features. . Options via FrontMatter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # Title &gt; Awesome summary - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . All of the above settings are enabled in this post, so you can see what they look like! . the summary field (preceeded by &gt;) will be displayed under your title, and will also be used by social media to display as the description of your page. | toc: setting this to true will automatically generate a table of contents | badges: setting this to true will display Google Colab and GitHub links on your blog post. | comments: setting this to true will enable comments. See these instructions for more details. | author this will display the authors names. | categories will allow your post to be categorized on a &quot;Tags&quot; page, where readers can browse your post by categories. | . Markdown front matter is formatted similarly to notebooks. The differences between the two can be viewed on the fastpages README. . Code Folding . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . If you want to completely hide cells (not just collapse them), read these instructions. . Interactive Charts With Altair . Interactive visualizations made with Altair remain interactive! . We leave this below cell unhidden so you can enjoy a preview of syntax highlighting in fastpages, which uses the Dracula theme. . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;IMDB_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget IMDB_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | 6.1 | . 1 First Love, Last Rites | 10876.0 | 300000.0 | 6.9 | . 2 I Married a Strange Person | 203134.0 | 250000.0 | 6.8 | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | NaN | . 4 Slam | 1087521.0 | 1000000.0 | 3.4 | . Other Features . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Images w/Captions . You can include markdown images with captions like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Of course, the caption is optional. . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . More Examples . This tutorial contains more examples of what you can do with notebooks. . How fastpages Converts Notebooks to Blog Posts . fastpages uses nbdev to power the conversion process of Jupyter Notebooks to blog posts. When you save a notebook into the /_notebooks folder of your repository, GitHub Actions applies nbdev against those notebooks automatically. The same process occurs when you save Word documents or markdown files into the _word or _posts directory, respectively. . We will discuss how GitHub Actions work in a follow up blog post. . Resources &amp; Next Steps . We highly encourage you to start blogging with fastpages! Some resources that may be helpful: . fastpages repo - this is where you can go to create your own fastpages blog! | Fastai forums - nbdev &amp; blogging category. You can ask questions about fastpages here, as well as suggest new features. | nbdev: this project powers the conversion of Jupyter notebooks to blog posts. | . If you end up writing a blog post using fastpages, please let us know on Twitter: @jeremyphoward, @HamelHusain. .",
            "url": "https://impepper.github.io/myPortfolio/fastpages/jupyter/2020/02/21/introducing-fastpages.html",
            "relUrl": "/fastpages/jupyter/2020/02/21/introducing-fastpages.html",
            "date": " • Feb 21, 2020"
        }
        
    
  
    
        ,"post8": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://impepper.github.io/myPortfolio/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post9": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Footnotes . This is the footnote. &#8617; . |",
            "url": "https://impepper.github.io/myPortfolio/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  
    
        ,"post10": {
            "title": "Microsoft Word Example Post",
            "content": "When writing a blog post with Microsoft Word – the filename becomes the title. In this case the file name is “2020-01-01-Microsoft-Word-Example-Post.docx”. . There is minimal support for Word documents in fastpages compared to Jupyter notebooks. Some known limitations: . alt text in Word documents are not yet supported by fastpages, and will break links to images. . | You can only specify front matter for Word documents globally. See the README for more details. . | . For greater control over the content produced from Word documents, you will need to convert Word to markdown files manually. You can follow the steps in this blog post, which walk you through how to use pandoc to do the conversion. Note: If you wish to customize your Word generated blog post in markdown, make sure you delete your Word document from the _word directory so your markdown file doesn’t get overwritten! . If your primary method of writing blog posts is Word documents, and you plan on always manually editing Word generated markdown files, you are probably better off using fast_template instead of fastpages. . The material below is a reproduction of this blog post, and serves as an illustrative example. . Maintaining a healthy open source project can entail a huge amount of toil. Popular projects often have orders of magnitude more users and episodic contributors opening issues and PRs than core maintainers capable of handling these issues. . Consider this graphic prepared by the NumFOCUS foundation showing the number of maintainers for three widely used scientific computing projects: . . We can see that across these three projects, there is a very low ratio maintainers to users. Fixing this problem is not an easy task and likely requires innovative solutions to address the economics as well as tools. . Due to its recent momentum and popularity, Kubeflow suffers from a similar fate as illustrated by the growth of new issues opened: . . Source: “TensorFlow World 2019, Automating Your Developer Workflow With ML” . Coincidentally, while building out end to end machine learning examples for Kubeflow, we built two examples using publicly available GitHub data: GitHub Issue Summarization and Code Search. While these tutorials were useful for demonstrating components of Kubeflow, we realized that we could take this a step further and build concrete data products that reduce toil for maintainers. . This is why we started the project kubeflow/code-intelligence, with the goals of increasing project velocity and health using data driven tools. Below are two projects we are currently experimenting with : . Issue Label Bot: This is a bot that automatically labels GitHub issues using Machine Learning. This bot is a GitHub App that was originally built for Kubeflow but is now also used by several large open source projects. The current version of this bot only applies a very limited set of labels, however we are currently A/B testing new models that allow personalized labels. Here is a blog post discussing this project in more detail. . | Issue Triage GitHub Action: to compliment the Issue Label Bot, we created a GitHub Action that automatically adds / removes Issues to the Kubeflow project board tracking issues needing triage. . | Together these projects allow us to reduce the toil of triaging issues. The GitHub Action makes it much easier for the Kubeflow maintainers to track issues needing triage. With the label bot we have taken the first steps in using ML to replace human intervention. We plan on using features extracted by ML to automate more steps in the triage process to further reduce toil. . Building Solutions with GitHub Actions . One of the premises of Kubeflow is that a barrier to building data driven, ML powered solutions is getting models into production and integrated into a solution. In the case of building models to improve OSS project health, that often means integrating with GitHub where the project is hosted. . We are really excited by GitHub’s newly released feature GitHub Actions because we think it will make integrating ML with GitHub much easier. . For simple scripts, like the issue triage script, GitHub actions make it easy to automate executing the script in response to GitHub events without having to build and host a GitHub app. . To automate adding/removing issues needing triage to a Kanban board we wrote a simple python script that interfaces with GitHub’s GraphQL API to modify issues. . As we continue to iterate on ML Models to further reduce toil, GitHub Actions will make it easy to leverage Kubeflow to put our models into production faster. A number of prebuilt GitHub Actions make it easy to create Kubernetes resources in response to GitHub events. For example, we have created GitHub Actions to launch Argo Workflows. This means once we have a Kubernetes job or workflow to perform inference we can easily integrate the model with GitHub and have the full power of Kubeflow and Kubernetes (eg. GPUs). We expect this will allow us to iterate much faster compared to building and maintaining GitHub Apps. . Call To Action . We have a lot more work to do in order to achieve our goal of reducing the amount of toil involved in maintaining OSS projects. If your interested in helping out here’s a couple of issues to get started: . Help us create reports that pull and visualize key performance indicators (KPI). https://github.com/kubeflow/code-intelligence/issues/71 . We have defined our KPI here: issue #19 | . | Combine repo specific and non-repo specific label predictions: https://github.com/kubeflow/code-intelligence/issues/70 . | . In addition to the aforementioned issues we welcome contributions for these other issues in our repo. .",
            "url": "https://impepper.github.io/myPortfolio/2020/01/01/Microsoft-Word-Example-Post.html",
            "relUrl": "/2020/01/01/Microsoft-Word-Example-Post.html",
            "date": " • Jan 1, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "CV",
          "content": "EDUCATION . Gemological Institute of America | 東海大學 (Sep.1990 ~ Jun.1994) | . WORK EXPERIENCE . Chanel Inc. (Taiwan) . IT Manager - Client Solution &amp; Digital . One to support frontline the suitable ecosystems and find potential digital activaions accordingly. . To design and build the digital ecosystem architect on LINE/SFMC for CRM purpose and potential business activation ideas | To cooperate with regional colleagues launching newly activations | To utilize functional roles on each sub-systems | . Loreal Taiwan . Ditital Product Solution Manager . One to build OMNI ecosystems as turnkey and find potential buiness activaions accordingly. . To manage and build the digital ecosystem architect for potential business activation ideas | To define, build, and utilize functional roles on each sub-system | To find business opportunities though existed systems or implementing new technologies/ideas | Country key contact with Global/Region on GA/GTM Tagging | . Project Manager . To build/upgrading the online eCommerce website solution as the brand/local integrations needs | To monitor and enhance the online sales activity and performance | To ensure user experience and all eCommerce activities are consistent with the brand sense of purpose | Collect and connect working knowledge on the e-retailers | Optimizing SEO/Data Tracking Schema collecting owned data for further analyzing | Create synergies between inside and outside websites in data synchronizations | . Freelace . One to build and integrate digital systems for business innovations. . To build eCommerce website and desktop tools managing product data (external data sources) | To build mobile app and managing web consols | To build and maintain customer/product/sales systems for small business | . TechArt Center, Taipei National University of the Arts . Engineer . To support exhibition planning | Code rewriting | Exhibition space planning | To support annual projects and general affairs | .",
          "url": "https://impepper.github.io/myPortfolio/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  
      ,"page6": {
          "title": "Skills",
          "content": "Certifications . Critical Thinking for More Effective Communication (2021) . fierce CONVERSATIONS (2021) . Python for Machine Learning and Data Science Bootcamp (2021) . Social Media Marketing &amp; Digital Marketing Course (2020) . Skills . Software Deveopment . Desktop/WEB applications, Integrations (e.g. LINE Messaging Bot), API . Programing Language . Javascript, Python, VBA | . Web/Data analytics . Web Analytics . Google Analytics | Google Tag Manager Website Optimizing . | SEO | AB Test (ABTasty / Google Optimize) | . Data Management . Data Managing/Engineering . SQL | Data processing Data Visualization . | Google Data Studio | Microsoft Power BI | . Project Management . Robotic Process Automation (RPA) . Selenium | Microsoft Power Automate | Katalon Studio | AutoIt | UIPath Software Project Management . | JIRA | Confluence | Airtable | .",
          "url": "https://impepper.github.io/myPortfolio/skill/",
          "relUrl": "/skill/",
          "date": ""
      }
      
  

  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://impepper.github.io/myPortfolio/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}